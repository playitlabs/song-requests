name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./server/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.package-version.outputs.version }} already exists. Skipping release."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, get all commits
            CHANGELOG=$(git log --pretty=format:"* %s" --no-merges)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s" --no-merges)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.tag_check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          body: |
            Changes in this release:
            ${{ steps.changelog.outputs.CHANGELOG }}
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 